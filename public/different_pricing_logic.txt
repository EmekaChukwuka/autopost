# Separated Login, Sign Up, and Pricing Pages with Client-Side Scripts

I'll create separate HTML files for each page and organize the client-side JavaScript accordingly.

## File Structure
```
project/
├── index.html          (Pricing page)
├── login.html          (Login page)
├── signup.html         (Sign up page)
├── styles/
│   └── main.css        (Shared styles)
└── scripts/
    ├── auth.js         (Authentication functions)
    ├── trial.js        (Trial management)
    └── main.js         (Common functionality)
```

## 1. Shared Styles (styles/main.css)

```css
:root {
    --primary: #008753; /* Nigerian green */
    --secondary: #008753;
    --accent: #E6BE8A;
    --light: #f8f9fa;
    --dark: #343a40;
    --danger: #dc3545;
    --gray: #6c757d;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

body {
    background-color: #f5f5f5;
    color: var(--dark);
    line-height: 1.6;
}

.container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px 0;
}

.logo {
    font-size: 1.8rem;
    font-weight: bold;
    color: var(--primary);
    display: flex;
    align-items: center;
    text-decoration: none;
}

.logo i {
    margin-right: 10px;
}

.auth-buttons {
    display: flex;
    gap: 15px;
}

.btn {
    display: inline-block;
    padding: 10px 20px;
    background: var(--primary);
    color: white;
    text-decoration: none;
    border-radius: 5px;
    font-weight: bold;
    border: none;
    cursor: pointer;
    transition: background 0.3s ease;
    font-size: 1rem;
}

.btn:hover {
    background: #006641;
}

.btn-outline {
    background: transparent;
    border: 2px solid var(--primary);
    color: var(--primary);
}

.btn-outline:hover {
    background: var(--primary);
    color: white;
}

.hero {
    text-align: center;
    padding: 30px 0;
}

.hero h1 {
    font-size: 2.5rem;
    color: var(--primary);
    margin-bottom: 10px;
}

.hero p {
    font-size: 1.2rem;
    color: var(--gray);
    max-width: 800px;
    margin: 0 auto;
}

.pricing-plans {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 30px;
    margin: 40px 0;
}

.pricing-card {
    background: white;
    border-radius: 10px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 350px;
    padding: 30px;
    text-align: center;
    transition: transform 0.3s ease;
}

.pricing-card:hover {
    transform: translateY(-10px);
}

.pricing-card.popular {
    border: 2px solid var(--primary);
    position: relative;
}

.popular-badge {
    position: absolute;
    top: -12px;
    left: 50%;
    transform: translateX(-50%);
    background: var(--primary);
    color: white;
    padding: 5px 15px;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: bold;
}

.plan-name {
    font-size: 1.5rem;
    color: var(--dark);
    margin-bottom: 15px;
}

.plan-price {
    font-size: 2.5rem;
    color: var(--primary);
    margin-bottom: 20px;
}

.plan-price span {
    font-size: 1rem;
    color: var(--gray);
}

.plan-features {
    list-style: none;
    margin: 20px 0;
    text-align: left;
}

.plan-features li {
    padding: 10px 0;
    border-bottom: 1px solid #eee;
}

.plan-features li i {
    color: var(--primary);
    margin-right: 10px;
}

.btn-plan {
    width: 100%;
    padding: 12px;
    font-size: 1.1rem;
}

.trial-status {
    background: white;
    border-radius: 10px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    padding: 20px;
    margin: 40px auto;
    max-width: 600px;
    text-align: center;
}

.trial-status h2 {
    color: var(--primary);
    margin-bottom: 15px;
}

.countdown {
    font-size: 1.5rem;
    font-weight: bold;
    color: var(--dark);
    margin: 15px 0;
}

.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.modal-content {
    background: white;
    padding: 30px;
    border-radius: 10px;
    max-width: 500px;
    width: 100%;
    text-align: center;
}

.modal h2 {
    color: var(--primary);
    margin-bottom: 15px;
}

.modal p {
    margin-bottom: 20px;
}

.modal-buttons {
    display: flex;
    justify-content: center;
    gap: 15px;
}

.auth-modal {
    display: none;
}

.auth-form {
    display: flex;
    flex-direction: column;
    gap: 15px;
    margin-top: 20px;
}

.form-group {
    text-align: left;
}

.form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
}

.form-group input {
    width: 100%;
    padding: 12px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 1rem;
}

.form-switch {
    margin-top: 15px;
    font-size: 0.9rem;
}

.form-switch a {
    color: var(--primary);
    text-decoration: none;
    font-weight: bold;
}

.form-switch a:hover {
    text-decoration: underline;
}

footer {
    text-align: center;
    padding: 30px 0;
    color: var(--gray);
    margin-top: 40px;
    border-top: 1px solid #eee;
}

.nigeria-flag {
    display: inline-block;
    height: 20px;
    width: 30px;
    background: linear-gradient(to right, #008753 0%, #008753 33%, white 33%, white 66%, #008753 66%, #008753 100%);
    margin-right: 10px;
    vertical-align: middle;
    border-radius: 2px;
}

.user-info {
    display: flex;
    align-items: center;
    gap: 10px;
}

.user-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: var(--primary);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
}

.error-message {
    color: var(--danger);
    margin-top: 5px;
    font-size: 0.9rem;
    display: none;
}

.auth-page {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
}

.auth-container {
    background: white;
    border-radius: 10px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 450px;
    padding: 40px;
}

.auth-header {
    text-align: center;
    margin-bottom: 30px;
}

.auth-header h1 {
    color: var(--primary);
    margin-bottom: 10px;
}

.auth-header p {
    color: var(--gray);
}

.auth-footer {
    text-align: center;
    margin-top: 20px;
}

@media (max-width: 768px) {
    .pricing-plans {
        flex-direction: column;
        align-items: center;
    }
    
    .pricing-card {
        margin-bottom: 20px;
    }
    
    .auth-buttons {
        flex-direction: column;
        gap: 10px;
    }
    
    .auth-container {
        padding: 20px;
        margin: 20px;
    }
}
```

## 2. Common JavaScript (scripts/main.js)

```javascript
// API base URL - change this to your server URL
const API_BASE_URL = 'http://localhost:3000/api';

// Check if user is logged in
function checkAuthStatus() {
    const token = localStorage.getItem('authToken');
    const user = JSON.parse(localStorage.getItem('currentUser'));
    
    if (token && user) {
        if (typeof showUserInfo === 'function') {
            showUserInfo(user);
        }
        
        if (typeof checkTrialStatus === 'function') {
            checkTrialStatus();
        }
        
        return true;
    }
    
    return false;
}

// Show error message
function showError(elementId, message) {
    const errorElement = document.getElementById(elementId);
    if (errorElement) {
        errorElement.textContent = message;
        errorElement.style.display = 'block';
    }
}

// Clear error messages
function clearErrors() {
    const errorElements = document.querySelectorAll('.error-message');
    errorElements.forEach(element => {
        element.textContent = '';
        element.style.display = 'none';
    });
}

// Show user info in header
function showUserInfo(user) {
    const userInfo = document.getElementById('userInfo');
    const authButtons = document.getElementById('authButtons');
    const userAvatar = document.getElementById('userAvatar');
    const userName = document.getElementById('userName');
    
    if (userInfo && authButtons && userAvatar && userName) {
        userAvatar.textContent = user.name.charAt(0).toUpperCase();
        userName.textContent = user.name;
        userInfo.style.display = 'flex';
        authButtons.style.display = 'none';
    }
}

// Logout function
function logout() {
    localStorage.removeItem('authToken');
    localStorage.removeItem('currentUser');
    
    const userInfo = document.getElementById('userInfo');
    const authButtons = document.getElementById('authButtons');
    const trialStatus = document.getElementById('trialStatus');
    
    if (userInfo && authButtons) {
        userInfo.style.display = 'none';
        authButtons.style.display = 'flex';
    }
    
    if (trialStatus) {
        trialStatus.style.display = 'none';
    }
    
    alert('You have been logged out');
    
    // Redirect to home page if not already there
    if (!window.location.pathname.endsWith('index.html') && 
        !window.location.pathname.endsWith('/')) {
        window.location.href = 'index.html';
    }
}

// Initialize page
document.addEventListener('DOMContentLoaded', function() {
    // Check authentication status
    checkAuthStatus();
    
    // Add logout event listener if logout button exists
    const logoutBtn = document.getElementById('logoutBtn');
    if (logoutBtn) {
        logoutBtn.addEventListener('click', logout);
    }
    
    // Close modals when clicking outside
    window.addEventListener('click', function(e) {
        if (e.target.classList.contains('modal')) {
            e.target.style.display = 'none';
            clearErrors();
        }
    });
});
```

## 3. Authentication JavaScript (scripts/auth.js)

```javascript
// Register new user
async function registerUser(name, email, password) {
    try {
        const response = await fetch(`${API_BASE_URL}/auth/register`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ name, email, password })
        });
        
        const data = await response.json();
        
        if (response.ok) {
            // Store token and user data
            localStorage.setItem('authToken', data.token);
            localStorage.setItem('currentUser', JSON.stringify(data.user));
            
            if (typeof showUserInfo === 'function') {
                showUserInfo(data.user);
            }
            
            clearErrors();
            
            // Check if there's a pending trial after signup
            const pendingTrial = localStorage.getItem('pendingTrial');
            if (pendingTrial && typeof startFreeTrial === 'function') {
                startFreeTrial(pendingTrial);
                localStorage.removeItem('pendingTrial');
                
                // Redirect to home page
                window.location.href = 'index.html';
            } else {
                alert('Account created successfully!');
                
                // Redirect to home page
                window.location.href = 'index.html';
            }
        } else {
            // Show validation errors
            if (data.errors) {
                data.errors.forEach(error => {
                    showError(`${error.field}Error`, error.msg);
                });
            } else {
                alert(data.message || 'Registration failed');
            }
        }
    } catch (error) {
        console.error('Registration error:', error);
        alert('Registration failed. Please try again.');
    }
}

// Login user
async function loginUser(email, password) {
    try {
        const response = await fetch(`${API_BASE_URL}/auth/login`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ email, password })
        });
        
        const data = await response.json();
        
        if (response.ok) {
            // Store token and user data
            localStorage.setItem('authToken', data.token);
            localStorage.setItem('currentUser', JSON.stringify(data.user));
            
            if (typeof showUserInfo === 'function') {
                showUserInfo(data.user);
            }
            
            clearErrors();
            
            // Check trial status
            if (typeof checkTrialStatus === 'function') {
                checkTrialStatus();
            }
            
            alert('Login successful!');
            
            // Redirect to home page
            window.location.href = 'index.html';
        } else {
            // Show validation errors
            if (data.errors) {
                data.errors.forEach(error => {
                    showError(`${error.field}Error`, error.msg);
                });
            } else {
                alert(data.message || 'Login failed');
            }
        }
    } catch (error) {
        console.error('Login error:', error);
        alert('Login failed. Please try again.');
    }
}

// Initialize auth pages
function initAuthPage() {
    const loginForm = document.getElementById('loginForm');
    const signupForm = document.getElementById('signupForm');
    
    if (loginForm) {
        loginForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const email = document.getElementById('loginEmail').value;
            const password = document.getElementById('loginPassword').value;
            
            if (!email || !password) {
                showError('loginEmailError', 'Please enter both email and password');
                return;
            }
            
            loginUser(email, password);
        });
    }
    
    if (signupForm) {
        signupForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const name = document.getElementById('signupName').value;
            const email = document.getElementById('signupEmail').value;
            const password = document.getElementById('signupPassword').value;
            
            if (!name || !email || !password) {
                showError('signupNameError', 'Please fill all fields');
                return;
            }
            
            registerUser(name, email, password);
        });
    }
}

// Add to DOMContentLoaded for auth pages
if (document.getElementById('loginForm') || document.getElementById('signupForm')) {
    document.addEventListener('DOMContentLoaded', function() {
        initAuthPage();
        
        // Check if user is already logged in
        if (checkAuthStatus()) {
            // Redirect to home page if already logged in
            window.location.href = 'index.html';
        }
    });
}
```

## 4. Trial Management JavaScript (scripts/trial.js)

```javascript
// Check trial status
async function checkTrialStatus() {
    try {
        const token = localStorage.getItem('authToken');
        const response = await fetch(`${API_BASE_URL}/trials/status`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
        
        if (response.ok) {
            const trialData = await response.json();
            
            if (trialData.active) {
                const endDate = new Date(trialData.end_date);
                const now = new Date();
                
                if (now < endDate) {
                    // Trial is still active
                    showTrialStatus(trialData);
                    startCountdown(endDate);
                } else {
                    // Trial has ended
                    showPaymentModal();
                }
            }
        }
    } catch (error) {
        console.error('Error checking trial status:', error);
    }
}

// Start free trial
async function startFreeTrial(plan) {
    try {
        const token = localStorage.getItem('authToken');
        const response = await fetch(`${API_BASE_URL}/trials/start`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({ plan })
        });
        
        const data = await response.json();
        
        if (response.ok) {
            showTrialStatus(data);
            
            const endDate = new Date(data.end_date);
            startCountdown(endDate);
            
            alert(`Your ${plan} plan free trial has started! You have 14 days to explore all features.`);
        } else {
            alert(data.message || 'Failed to start trial');
        }
    } catch (error) {
        console.error('Error starting trial:', error);
        alert('Failed to start trial. Please try again.');
    }
}

// Show trial status
function showTrialStatus(trialData) {
    const trialStatus = document.getElementById('trialStatus');
    const currentPlan = document.getElementById('currentPlan');
    const trialStartDate = document.getElementById('trialStartDate');
    const trialEndDate = document.getElementById('trialEndDate');
    
    if (trialStatus && currentPlan && trialStartDate && trialEndDate) {
        const startDate = new Date(trialData.start_date);
        const endDate = new Date(trialData.end_date);
        
        currentPlan.textContent = trialData.plan.charAt(0).toUpperCase() + trialData.plan.slice(1);
        trialStartDate.textContent = startDate.toLocaleDateString();
        trialEndDate.textContent = endDate.toLocaleDateString();
        
        trialStatus.style.display = 'block';
    }
}

// Start countdown timer
function startCountdown(endDate) {
    const countdown = document.getElementById('countdown');
    
    if (!countdown) return;
    
    function updateCountdown() {
        const now = new Date();
        const timeRemaining = endDate - now;
        
        if (timeRemaining <= 0) {
            clearInterval(countdownInterval);
            showPaymentModal();
            return;
        }
        
        const days = Math.floor(timeRemaining / (1000 * 60 * 60 * 24));
        const hours = Math.floor((timeRemaining % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((timeRemaining % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((timeRemaining % (1000 * 60)) / 1000);
        
        countdown.textContent = `${days}d ${hours}h ${minutes}m ${seconds}s`;
    }
    
    updateCountdown();
    const countdownInterval = setInterval(updateCountdown, 1000);
}

// Show payment modal
function showPaymentModal() {
    const paymentModal = document.getElementById('paymentModal');
    const trialStatus = document.getElementById('trialStatus');
    
    if (paymentModal) {
        paymentModal.style.display = 'flex';
    }
    
    if (trialStatus) {
        trialStatus.style.display = 'none';
    }
}

// Initialize trial functionality
function initTrialButtons() {
    const trialButtons = document.querySelectorAll('.start-trial');
    
    trialButtons.forEach(button => {
        button.addEventListener('click', function() {
            const plan = this.getAttribute('data-plan');
            
            // Check if user is logged in
            const currentUser = JSON.parse(localStorage.getItem('currentUser'));
            const token = localStorage.getItem('authToken');
            
            if (!token || !currentUser) {
                // Redirect to signup page if not logged in
                localStorage.setItem('pendingTrial', plan);
                window.location.href = 'signup.html';
            } else {
                startFreeTrial(plan);
            }
        });
    });
}

// Add to DOMContentLoaded for pricing page
if (document.querySelector('.start-trial')) {
    document.addEventListener('DOMContentLoaded', function() {
        initTrialButtons();
        
        // Setup payment modal buttons
        const subscribeNow = document.getElementById('subscribeNow');
        const remindLater = document.getElementById('remindLater');
        
        if (subscribeNow) {
            subscribeNow.addEventListener('click', function() {
                alert('Redirecting to payment page...');
                const paymentModal = document.getElementById('paymentModal');
                if (paymentModal) {
                    paymentModal.style.display = 'none';
                }
            });
        }
        
        if (remindLater) {
            remindLater.addEventListener('click', function() {
                const paymentModal = document.getElementById('paymentModal');
                if (paymentModal) {
                    paymentModal.style.display = 'none';
                }
            });
        }
    });
}
```

## 5. Pricing Page (index.html)

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Nigerian Software - Pricing</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="styles/main.css">
</head>
<body>
    <div class="container">
        <header>
            <a href="index.html" class="logo">
                <i class="fas fa-code"></i>
                <span>NaijaSoft</span>
            </a>
            <div class="auth-buttons" id="authButtons">
                <a href="login.html" class="btn btn-outline">Login</a>
                <a href="signup.html" class="btn">Sign Up</a>
            </div>
            <div class="user-info" id="userInfo" style="display: none;">
                <div class="user-avatar" id="userAvatar">U</div>
                <span id="userName">User</span>
                <button class="btn btn-outline" id="logoutBtn">Logout</button>
            </div>
        </header>
        
        <div class="hero">
            <h1>Nigerian Software Solutions</h1>
            <p>Choose the perfect plan for your business. All plans include a 14-day free trial with no commitment.</p>
        </div>
        
        <div class="pricing-plans">
            <div class="pricing-card">
                <h2 class="plan-name">Basic Plan</h2>
                <div class="plan-price">₦5,000 <span>/month</span></div>
                <ul class="plan-features">
                    <li><i class="fas fa-check"></i> Up to 5 users</li>
                    <li><i class="fas fa-check"></i> 10GB storage</li>
                    <li><i class="fas fa-check"></i> Basic analytics</li>
                    <li><i class="fas fa-check"></i> Email support</li>
                </ul>
                <button class="btn btn-plan start-trial" data-plan="basic">Start Free Trial</button>
            </div>
            
            <div class="pricing-card popular">
                <div class="popular-badge">MOST POPULAR</div>
                <h2 class="plan-name">Professional Plan</h2>
                <div class="plan-price">₦15,000 <span>/month</span></div>
                <ul class="plan-features">
                    <li><i class="fas fa-check"></i> Up to 20 users</li>
                    <li><i class="fas fa-check"></i> 50GB storage</li>
                    <li><i class="fas fa-check"></i> Advanced analytics</li>
                    <li><i class="fas fa-check"></i> Priority support</li>
                    <li><i class="fas fa-check"></i> API access</li>
                </ul>
                <button class="btn btn-plan start-trial" data-plan="professional">Start Free Trial</button>
            </div>
            
            <div class="pricing-card">
                <h2 class="plan-name">Enterprise Plan</h2>
                <div class="plan-price">₦35,000 <span>/month</span></div>
                <ul class="plan-features">
                    <li><i class="fas fa-check"></i> Unlimited users</li>
                    <li><i class="fas fa-check"></i> 500GB storage</li>
                    <li><i class="fas fa-check"></i> Custom analytics</li>
                    <li><i class="fas fa-check"></i> 24/7 dedicated support</li>
                    <li><i class="fas fa-check"></i> Full API access</li>
                    <li><i class="fas fa-check"></i> Custom integrations</li>
                </ul>
                <button class="btn btn-plan start-trial" data-plan="enterprise">Start Free Trial</button>
            </div>
        </div>
        
        <div class="trial-status" id="trialStatus" style="display: none;">
            <h2>Your Free Trial Status</h2>
            <p>You are currently on the <strong id="currentPlan"></strong> plan</p>
            <p>Your trial started on: <strong id="trialStartDate"></strong></p>
            <p>Your trial ends on: <strong id="trialEndDate"></strong></p>
            <div class="countdown">Time remaining: <span id="countdown"></span></div>
        </div>
        
        <div class="modal" id="paymentModal">
            <div class="modal-content">
                <h2>Your Free Trial Has Ended</h2>
                <p>Thank you for trying our software. To continue using all features, please subscribe to a paid plan.</p>
                <div class="modal-buttons">
                    <button class="btn" id="subscribeNow">Subscribe Now</button>
                    <button class="btn btn-outline" id="remindLater">Remind Me Later</button>
                </div>
            </div>
        </div>
        
        <footer>
            <p><span class="nigeria-flag"></span> Proudly Nigerian software serving businesses worldwide</p>
            <p>© 2023 NaijaSoft. All rights reserved.</p>
        </footer>
    </div>

    <script src="scripts/main.js"></script>
    <script src="scripts/trial.js"></script>
</body>
</html>
```

## 6. Login Page (login.html)

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login - Nigerian Software</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="styles/main.css">
</head>
<body>
    <div class="auth-page">
        <div class="auth-container">
            <div class="auth-header">
                <h1>Welcome Back</h1>
                <p>Sign in to your account to continue</p>
            </div>
            
            <form id="loginForm">
                <div class="auth-form">
                    <div class="form-group">
                        <label for="loginEmail">Email</label>
                        <input type="email" id="loginEmail" placeholder="Your email address" required>
                        <div class="error-message" id="loginEmailError"></div>
                    </div>
                    <div class="form-group">
                        <label for="loginPassword">Password</label>
                        <input type="password" id="loginPassword" placeholder="Your password" required>
                        <div class="error-message" id="loginPasswordError"></div>
                    </div>
                    <button type="submit" class="btn">Login</button>
                </div>
            </form>
            
            <div class="auth-footer">
                <p>Don't have an account? <a href="signup.html">Sign up</a></p>
                <p><a href="index.html">← Back to home</a></p>
            </div>
        </div>
    </div>

    <script src="scripts/main.js"></script>
    <script src="scripts/auth.js"></script>
</body>
</html>
```

## 7. Sign Up Page (signup.html)

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sign Up - Nigerian Software</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="styles/main.css">
</head>
<body>
    <div class="auth-page">
        <div class="auth-container">
            <div class="auth-header">
                <h1>Create Account</h1>
                <p>Sign up to start your free trial</p>
            </div>
            
            <form id="signupForm">
                <div class="auth-form">
                    <div class="form-group">
                        <label for="signupName">Full Name</label>
                        <input type="text" id="signupName" placeholder="Your full name" required>
                        <div class="error-message" id="signupNameError"></div>
                    </div>
                    <div class="form-group">
                        <label for="signupEmail">Email</label>
                        <input type="email" id="signupEmail" placeholder="Your email address" required>
                        <div class="error-message" id="signupEmailError"></div>
                    </div>
                    <div class="form-group">
                        <label for="signupPassword">Password</label>
                        <input type="password" id="signupPassword" placeholder="Create a password" required>
                        <div class="error-message" id="signupPasswordError"></div>
                    </div>
                    <button type="submit" class="btn">Sign Up & Start Trial</button>
                </div>
            </form>
            
            <div class="auth-footer">
                <p>Already have an account? <a href="login.html">Login</a></p>
                <p><a href="index.html">← Back to home</a></p>
            </div>
        </div>
    </div>

    <script src="scripts/main.js"></script>
    <script src="scripts/auth.js"></script>
</body>
</html>
```

## Setup Instructions

1. Create the folder structure as shown above
2. Save each code snippet to its respective file
3. Make sure your Node.js backend is running on `http://localhost:3000`
4. Open `index.html` in a web browser to view the pricing page

This implementation provides a clean separation between:
- The pricing page (index.html)
- The login page (login.html) 
- The signup page (signup.html)
- Shared styles (styles/main.css)
- Authentication logic (scripts/auth.js)
- Trial management logic (scripts/trial.js)
- Common functionality (scripts/main.js)

The pages are now properly separated while maintaining all the functionality of the original single-page application.







# Implementing Server-Side Validation with Node.js and MySQL

I'll create a complete solution with a frontend that connects to a Node.js backend with MySQL database for user authentication and trial management.

## Frontend (HTML/CSS/JS)

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Nigerian Software - Pricing</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #008753; /* Nigerian green */
            --secondary: #008753;
            --accent: #E6BE8A;
            --light: #f8f9fa;
            --dark: #343a40;
            --danger: #dc3545;
            --gray: #6c757d;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: #f5f5f5;
            color: var(--dark);
            line-height: 1.6;
        }
        
        .container {
            width: 100%;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 0;
        }
        
        .logo {
            font-size: 1.8rem;
            font-weight: bold;
            color: var(--primary);
            display: flex;
            align-items: center;
        }
        
        .logo i {
            margin-right: 10px;
        }
        
        .auth-buttons {
            display: flex;
            gap: 15px;
        }
        
        .btn {
            display: inline-block;
            padding: 10px 20px;
            background: var(--primary);
            color: white;
            text-decoration: none;
            border-radius: 5px;
            font-weight: bold;
            border: none;
            cursor: pointer;
            transition: background 0.3s ease;
            font-size: 1rem;
        }
        
        .btn:hover {
            background: #006641;
        }
        
        .btn-outline {
            background: transparent;
            border: 2px solid var(--primary);
            color: var(--primary);
        }
        
        .btn-outline:hover {
            background: var(--primary);
            color: white;
        }
        
        .hero {
            text-align: center;
            padding: 30px 0;
        }
        
        .hero h1 {
            font-size: 2.5rem;
            color: var(--primary);
            margin-bottom: 10px;
        }
        
        .hero p {
            font-size: 1.2rem;
            color: var(--gray);
            max-width: 800px;
            margin: 0 auto;
        }
        
        .pricing-plans {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 30px;
            margin: 40px 0;
        }
        
        .pricing-card {
            background: white;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 350px;
            padding: 30px;
            text-align: center;
            transition: transform 0.3s ease;
        }
        
        .pricing-card:hover {
            transform: translateY(-10px);
        }
        
        .pricing-card.popular {
            border: 2px solid var(--primary);
            position: relative;
        }
        
        .popular-badge {
            position: absolute;
            top: -12px;
            left: 50%;
            transform: translateX(-50%);
            background: var(--primary);
            color: white;
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: bold;
        }
        
        .plan-name {
            font-size: 1.5rem;
            color: var(--dark);
            margin-bottom: 15px;
        }
        
        .plan-price {
            font-size: 2.5rem;
            color: var(--primary);
            margin-bottom: 20px;
        }
        
        .plan-price span {
            font-size: 1rem;
            color: var(--gray);
        }
        
        .plan-features {
            list-style: none;
            margin: 20px 0;
            text-align: left;
        }
        
        .plan-features li {
            padding: 10px 0;
            border-bottom: 1px solid #eee;
        }
        
        .plan-features li i {
            color: var(--primary);
            margin-right: 10px;
        }
        
        .btn-plan {
            width: 100%;
            padding: 12px;
            font-size: 1.1rem;
        }
        
        .trial-status {
            background: white;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            padding: 20px;
            margin: 40px auto;
            max-width: 600px;
            text-align: center;
        }
        
        .trial-status h2 {
            color: var(--primary);
            margin-bottom: 15px;
        }
        
        .countdown {
            font-size: 1.5rem;
            font-weight: bold;
            color: var(--dark);
            margin: 15px 0;
        }
        
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        
        .modal-content {
            background: white;
            padding: 30px;
            border-radius: 10px;
            max-width: 500px;
            width: 100%;
            text-align: center;
        }
        
        .modal h2 {
            color: var(--primary);
            margin-bottom: 15px;
        }
        
        .modal p {
            margin-bottom: 20px;
        }
        
        .modal-buttons {
            display: flex;
            justify-content: center;
            gap: 15px;
        }
        
        .auth-modal {
            display: none;
        }
        
        .auth-form {
            display: flex;
            flex-direction: column;
            gap: 15px;
            margin-top: 20px;
        }
        
        .form-group {
            text-align: left;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        
        .form-group input {
            width: 100%;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 1rem;
        }
        
        .form-switch {
            margin-top: 15px;
            font-size: 0.9rem;
        }
        
        .form-switch a {
            color: var(--primary);
            text-decoration: none;
            font-weight: bold;
        }
        
        .form-switch a:hover {
            text-decoration: underline;
        }
        
        footer {
            text-align: center;
            padding: 30px 0;
            color: var(--gray);
            margin-top: 40px;
            border-top: 1px solid #eee;
        }
        
        .nigeria-flag {
            display: inline-block;
            height: 20px;
            width: 30px;
            background: linear-gradient(to right, #008753 0%, #008753 33%, white 33%, white 66%, #008753 66%, #008753 100%);
            margin-right: 10px;
            vertical-align: middle;
            border-radius: 2px;
        }
        
        .user-info {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: var(--primary);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
        }
        
        .error-message {
            color: var(--danger);
            margin-top: 5px;
            font-size: 0.9rem;
            display: none;
        }
        
        @media (max-width: 768px) {
            .pricing-plans {
                flex-direction: column;
                align-items: center;
            }
            
            .pricing-card {
                margin-bottom: 20px;
            }
            
            .auth-buttons {
                flex-direction: column;
                gap: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <div class="logo">
                <i class="fas fa-code"></i>
                <span>NaijaSoft</span>
            </div>
            <div class="auth-buttons" id="authButtons">
                <button class="btn btn-outline" id="loginBtn">Login</button>
                <button class="btn" id="signupBtn">Sign Up</button>
            </div>
            <div class="user-info" id="userInfo" style="display: none;">
                <div class="user-avatar" id="userAvatar">U</div>
                <span id="userName">User</span>
                <button class="btn btn-outline" id="logoutBtn">Logout</button>
            </div>
        </header>
        
        <div class="hero">
            <h1>Nigerian Software Solutions</h1>
            <p>Choose the perfect plan for your business. All plans include a 14-day free trial with no commitment.</p>
        </div>
        
        <div class="pricing-plans">
            <div class="pricing-card">
                <h2 class="plan-name">Basic Plan</h2>
                <div class="plan-price">₦5,000 <span>/month</span></div>
                <ul class="plan-features">
                    <li><i class="fas fa-check"></i> Up to 5 users</li>
                    <li><i class="fas fa-check"></i> 10GB storage</li>
                    <li><i class="fas fa-check"></i> Basic analytics</li>
                    <li><i class="fas fa-check"></i> Email support</li>
                </ul>
                <button class="btn btn-plan start-trial" data-plan="basic">Start Free Trial</button>
            </div>
            
            <div class="pricing-card popular">
                <div class="popular-badge">MOST POPULAR</div>
                <h2 class="plan-name">Professional Plan</h2>
                <div class="plan-price">₦15,000 <span>/month</span></div>
                <ul class="plan-features">
                    <li><i class="fas fa-check"></i> Up to 20 users</li>
                    <li><i class="fas fa-check"></i> 50GB storage</li>
                    <li><i class="fas fa-check"></i> Advanced analytics</li>
                    <li><i class="fas fa-check"></i> Priority support</li>
                    <li><i class="fas fa-check"></i> API access</li>
                </ul>
                <button class="btn btn-plan start-trial" data-plan="professional">Start Free Trial</button>
            </div>
            
            <div class="pricing-card">
                <h2 class="plan-name">Enterprise Plan</h2>
                <div class="plan-price">₦35,000 <span>/month</span></div>
                <ul class="plan-features">
                    <li><i class="fas fa-check"></i> Unlimited users</li>
                    <li><i class="fas fa-check"></i> 500GB storage</li>
                    <li><i class="fas fa-check"></i> Custom analytics</li>
                    <li><i class="fas fa-check"></i> 24/7 dedicated support</li>
                    <li><i class="fas fa-check"></i> Full API access</li>
                    <li><i class="fas fa-check"></i> Custom integrations</li>
                </ul>
                <button class="btn btn-plan start-trial" data-plan="enterprise">Start Free Trial</button>
            </div>
        </div>
        
        <div class="trial-status" id="trialStatus" style="display: none;">
            <h2>Your Free Trial Status</h2>
            <p>You are currently on the <strong id="currentPlan"></strong> plan</p>
            <p>Your trial started on: <strong id="trialStartDate"></strong></p>
            <p>Your trial ends on: <strong id="trialEndDate"></strong></p>
            <div class="countdown">Time remaining: <span id="countdown"></span></div>
        </div>
        
        <div class="modal" id="paymentModal">
            <div class="modal-content">
                <h2>Your Free Trial Has Ended</h2>
                <p>Thank you for trying our software. To continue using all features, please subscribe to a paid plan.</p>
                <div class="modal-buttons">
                    <button class="btn" id="subscribeNow">Subscribe Now</button>
                    <button class="btn btn-outline" id="remindLater">Remind Me Later</button>
                </div>
            </div>
        </div>
        
        <div class="modal auth-modal" id="loginModal">
            <div class="modal-content">
                <h2>Login to Your Account</h2>
                <p>Enter your credentials to access your account</p>
                <div class="auth-form">
                    <div class="form-group">
                        <label for="loginEmail">Email</label>
                        <input type="email" id="loginEmail" placeholder="Your email address">
                        <div class="error-message" id="loginEmailError"></div>
                    </div>
                    <div class="form-group">
                        <label for="loginPassword">Password</label>
                        <input type="password" id="loginPassword" placeholder="Your password">
                        <div class="error-message" id="loginPasswordError"></div>
                    </div>
                    <button class="btn" id="doLogin">Login</button>
                </div>
                <div class="form-switch">
                    Don't have an account? <a href="#" id="switchToSignup">Sign up</a>
                </div>
            </div>
        </div>
        
        <div class="modal auth-modal" id="signupModal">
            <div class="modal-content">
                <h2>Create an Account</h2>
                <p>Sign up to start your free trial</p>
                <div class="auth-form">
                    <div class="form-group">
                        <label for="signupName">Full Name</label>
                        <input type="text" id="signupName" placeholder="Your full name">
                        <div class="error-message" id="signupNameError"></div>
                    </div>
                    <div class="form-group">
                        <label for="signupEmail">Email</label>
                        <input type="email" id="signupEmail" placeholder="Your email address">
                        <div class="error-message" id="signupEmailError"></div>
                    </div>
                    <div class="form-group">
                        <label for="signupPassword">Password</label>
                        <input type="password" id="signupPassword" placeholder="Create a password">
                        <div class="error-message" id="signupPasswordError"></div>
                    </div>
                    <button class="btn" id="doSignup">Sign Up & Start Trial</button>
                </div>
                <div class="form-switch">
                    Already have an account? <a href="#" id="switchToLogin">Login</a>
                </div>
            </div>
        </div>
        
        <footer>
            <p><span class="nigeria-flag"></span> Proudly Nigerian software serving businesses worldwide</p>
            <p>© 2023 NaijaSoft. All rights reserved.</p>
        </footer>
    </div>

    <script>
        // API base URL - change this to your server URL
        const API_BASE_URL = 'http://localhost:3000/api';
        
        document.addEventListener('DOMContentLoaded', function() {
            // DOM Elements
            const authButtons = document.getElementById('authButtons');
            const userInfo = document.getElementById('userInfo');
            const userAvatar = document.getElementById('userAvatar');
            const userName = document.getElementById('userName');
            const logoutBtn = document.getElementById('logoutBtn');
            const loginBtn = document.getElementById('loginBtn');
            const signupBtn = document.getElementById('signupBtn');
            const loginModal = document.getElementById('loginModal');
            const signupModal = document.getElementById('signupModal');
            const doLogin = document.getElementById('doLogin');
            const doSignup = document.getElementById('doSignup');
            const switchToSignup = document.getElementById('switchToSignup');
            const switchToLogin = document.getElementById('switchToLogin');
            const trialButtons = document.querySelectorAll('.start-trial');
            const trialStatus = document.getElementById('trialStatus');
            const currentPlan = document.getElementById('currentPlan');
            const trialStartDate = document.getElementById('trialStartDate');
            const trialEndDate = document.getElementById('trialEndDate');
            const countdown = document.getElementById('countdown');
            const paymentModal = document.getElementById('paymentModal');
            
            // Check if user is logged in
            const token = localStorage.getItem('authToken');
            const user = JSON.parse(localStorage.getItem('currentUser'));
            
            if (token && user) {
                showUserInfo(user);
                checkTrialStatus();
            }
            
            // Event Listeners
            loginBtn.addEventListener('click', function() {
                loginModal.style.display = 'flex';
            });
            
            signupBtn.addEventListener('click', function() {
                signupModal.style.display = 'flex';
            });
            
            doLogin.addEventListener('click', function() {
                const email = document.getElementById('loginEmail').value;
                const password = document.getElementById('loginPassword').value;
                
                if (!email || !password) {
                    showError('loginEmailError', 'Please enter both email and password');
                    return;
                }
                
                loginUser(email, password);
            });
            
            doSignup.addEventListener('click', function() {
                const name = document.getElementById('signupName').value;
                const email = document.getElementById('signupEmail').value;
                const password = document.getElementById('signupPassword').value;
                
                if (!name || !email || !password) {
                    showError('signupNameError', 'Please fill all fields');
                    return;
                }
                
                registerUser(name, email, password);
            });
            
            switchToSignup.addEventListener('click', function(e) {
                e.preventDefault();
                loginModal.style.display = 'none';
                signupModal.style.display = 'flex';
            });
            
            switchToLogin.addEventListener('click', function(e) {
                e.preventDefault();
                signupModal.style.display = 'none';
                loginModal.style.display = 'flex';
            });
            
            logoutBtn.addEventListener('click', function() {
                localStorage.removeItem('authToken');
                localStorage.removeItem('currentUser');
                userInfo.style.display = 'none';
                authButtons.style.display = 'flex';
                trialStatus.style.display = 'none';
                alert('You have been logged out');
            });
            
            // Add event listeners to trial buttons
            trialButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const plan = this.getAttribute('data-plan');
                    
                    // Check if user is logged in
                    const currentUser = JSON.parse(localStorage.getItem('currentUser'));
                    const token = localStorage.getItem('authToken');
                    
                    if (!token || !currentUser) {
                        // Show signup modal if not logged in
                        signupModal.style.display = 'flex';
                        // Store the planned trial for after signup
                        localStorage.setItem('pendingTrial', plan);
                    } else {
                        startFreeTrial(plan);
                    }
                });
            });
            
            // Modal button events
            document.getElementById('subscribeNow').addEventListener('click', function() {
                alert('Redirecting to payment page...');
                paymentModal.style.display = 'none';
            });
            
            document.getElementById('remindLater').addEventListener('click', function() {
                paymentModal.style.display = 'none';
            });
            
            // Close modals when clicking outside
            window.addEventListener('click', function(e) {
                if (e.target.classList.contains('modal')) {
                    e.target.style.display = 'none';
                    clearErrors();
                }
            });
            
            // API Functions
            async function registerUser(name, email, password) {
                try {
                    const response = await fetch(`${API_BASE_URL}/auth/register`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ name, email, password })
                    });
                    
                    const data = await response.json();
                    
                    if (response.ok) {
                        // Store token and user data
                        localStorage.setItem('authToken', data.token);
                        localStorage.setItem('currentUser', JSON.stringify(data.user));
                        
                        showUserInfo(data.user);
                        signupModal.style.display = 'none';
                        clearErrors();
                        
                        // Check if there's a pending trial after signup
                        const pendingTrial = localStorage.getItem('pendingTrial');
                        if (pendingTrial) {
                            startFreeTrial(pendingTrial);
                            localStorage.removeItem('pendingTrial');
                        } else {
                            alert('Account created successfully!');
                        }
                    } else {
                        // Show validation errors
                        if (data.errors) {
                            data.errors.forEach(error => {
                                showError(`${error.field}Error`, error.msg);
                            });
                        } else {
                            alert(data.message || 'Registration failed');
                        }
                    }
                } catch (error) {
                    console.error('Registration error:', error);
                    alert('Registration failed. Please try again.');
                }
            }
            
            async function loginUser(email, password) {
                try {
                    const response = await fetch(`${API_BASE_URL}/auth/login`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ email, password })
                    });
                    
                    const data = await response.json();
                    
                    if (response.ok) {
                        // Store token and user data
                        localStorage.setItem('authToken', data.token);
                        localStorage.setItem('currentUser', JSON.stringify(data.user));
                        
                        showUserInfo(data.user);
                        loginModal.style.display = 'none';
                        clearErrors();
                        
                        // Check trial status
                        checkTrialStatus();
                        
                        alert('Login successful!');
                    } else {
                        // Show validation errors
                        if (data.errors) {
                            data.errors.forEach(error => {
                                showError(`${error.field}Error`, error.msg);
                            });
                        } else {
                            alert(data.message || 'Login failed');
                        }
                    }
                } catch (error) {
                    console.error('Login error:', error);
                    alert('Login failed. Please try again.');
                }
            }
            
            async function checkTrialStatus() {
                try {
                    const token = localStorage.getItem('authToken');
                    const response = await fetch(`${API_BASE_URL}/trials/status`, {
                        method: 'GET',
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    });
                    
                    if (response.ok) {
                        const trialData = await response.json();
                        
                        if (trialData.active) {
                            const endDate = new Date(trialData.end_date);
                            const now = new Date();
                            
                            if (now < endDate) {
                                // Trial is still active
                                showTrialStatus(trialData);
                                startCountdown(endDate);
                            } else {
                                // Trial has ended
                                showPaymentModal();
                            }
                        }
                    }
                } catch (error) {
                    console.error('Error checking trial status:', error);
                }
            }
            
            async function startFreeTrial(plan) {
                try {
                    const token = localStorage.getItem('authToken');
                    const response = await fetch(`${API_BASE_URL}/trials/start`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        },
                        body: JSON.stringify({ plan })
                    });
                    
                    const data = await response.json();
                    
                    if (response.ok) {
                        showTrialStatus(data);
                        
                        const endDate = new Date(data.end_date);
                        startCountdown(endDate);
                        
                        alert(`Your ${plan} plan free trial has started! You have 14 days to explore all features.`);
                    } else {
                        alert(data.message || 'Failed to start trial');
                    }
                } catch (error) {
                    console.error('Error starting trial:', error);
                    alert('Failed to start trial. Please try again.');
                }
            }
            
            // UI Functions
            function showUserInfo(user) {
                userAvatar.textContent = user.name.charAt(0).toUpperCase();
                userName.textContent = user.name;
                userInfo.style.display = 'flex';
                authButtons.style.display = 'none';
            }
            
            function showTrialStatus(trialData) {
                const startDate = new Date(trialData.start_date);
                const endDate = new Date(trialData.end_date);
                
                currentPlan.textContent = trialData.plan.charAt(0).toUpperCase() + trialData.plan.slice(1);
                trialStartDate.textContent = startDate.toLocaleDateString();
                trialEndDate.textContent = endDate.toLocaleDateString();
                
                trialStatus.style.display = 'block';
            }
            
            function startCountdown(endDate) {
                function updateCountdown() {
                    const now = new Date();
                    const timeRemaining = endDate - now;
                    
                    if (timeRemaining <= 0) {
                        clearInterval(countdownInterval);
                        showPaymentModal();
                        return;
                    }
                    
                    const days = Math.floor(timeRemaining / (1000 * 60 * 60 * 24));
                    const hours = Math.floor((timeRemaining % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                    const minutes = Math.floor((timeRemaining % (1000 * 60 * 60)) / (1000 * 60));
                    const seconds = Math.floor((timeRemaining % (1000 * 60)) / 1000);
                    
                    countdown.textContent = `${days}d ${hours}h ${minutes}m ${seconds}s`;
                }
                
                updateCountdown();
                const countdownInterval = setInterval(updateCountdown, 1000);
            }
            
            function showPaymentModal() {
                paymentModal.style.display = 'flex';
                trialStatus.style.display = 'none';
            }
            
            function showError(elementId, message) {
                const errorElement = document.getElementById(elementId);
                errorElement.textContent = message;
                errorElement.style.display = 'block';
            }
            
            function clearErrors() {
                const errorElements = document.querySelectorAll('.error-message');
                errorElements.forEach(element => {
                    element.textContent = '';
                    element.style.display = 'none';
                });
            }
        });
    </script>
</body>
</html>
```

## Backend (Node.js with Express and MySQL)

Create a file named `server.js`:

```javascript
const express = require('express');
const mysql = require('mysql2');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const cors = require('cors');
const { body, validationResult } = require('express-validator');

const app = express();
const PORT = process.env.PORT || 3000;
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';

// Middleware
app.use(express.json());
app.use(cors());

// MySQL Database Connection
const db = mysql.createConnection({
    host: process.env.DB_HOST || 'localhost',
    user: process.env.DB_USER || 'root',
    password: process.env.DB_PASSWORD || '',
    database: process.env.DB_NAME || 'naija_soft'
});

db.connect((err) => {
    if (err) {
        console.error('Database connection failed: ', err.stack);
        return;
    }
    console.log('Connected to MySQL database');
});

// Create tables if they don't exist
const createTables = () => {
    // Users table
    const usersTable = `
        CREATE TABLE IF NOT EXISTS users (
            id INT AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            email VARCHAR(255) UNIQUE NOT NULL,
            password VARCHAR(255) NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    `;
    
    // Trials table
    const trialsTable = `
        CREATE TABLE IF NOT EXISTS trials (
            id INT AUTO_INCREMENT PRIMARY KEY,
            user_id INT NOT NULL,
            plan VARCHAR(50) NOT NULL,
            start_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            end_date TIMESTAMP NOT NULL,
            status ENUM('active', 'expired') DEFAULT 'active',
            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
        )
    `;
    
    db.query(usersTable, (err) => {
        if (err) console.error('Error creating users table: ', err);
    });
    
    db.query(trialsTable, (err) => {
        if (err) console.error('Error creating trials table: ', err);
    });
};

createTables();

// Middleware to verify JWT token
const authenticateToken = (req, res, next) => {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];
    
    if (!token) {
        return res.status(401).json({ message: 'Access token required' });
    }
    
    jwt.verify(token, JWT_SECRET, (err, user) => {
        if (err) {
            return res.status(403).json({ message: 'Invalid or expired token' });
        }
        req.user = user;
        next();
    });
};

// Validation middleware
const validateUser = [
    body('name').notEmpty().withMessage('Name is required'),
    body('email').isEmail().withMessage('Valid email is required'),
    body('password').isLength({ min: 6 }).withMessage('Password must be at least 6 characters')
];

// Routes

// Register new user
app.post('/api/auth/register', validateUser, async (req, res) => {
    try {
        // Check for validation errors
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ 
                message: 'Validation failed', 
                errors: errors.array().map(error => ({
                    field: error.param,
                    msg: error.msg
                }))
            });
        }
        
        const { name, email, password } = req.body;
        
        // Check if user already exists
        db.query('SELECT id FROM users WHERE email = ?', [email], async (err, results) => {
            if (err) {
                return res.status(500).json({ message: 'Database error' });
            }
            
            if (results.length > 0) {
                return res.status(400).json({ 
                    message: 'User already exists',
                    errors: [{ field: 'email', msg: 'Email already registered' }]
                });
            }
            
            // Hash password
            const hashedPassword = await bcrypt.hash(password, 10);
            
            // Insert new user
            db.query('INSERT INTO users (name, email, password) VALUES (?, ?, ?)', 
                [name, email, hashedPassword], (err, result) => {
                    if (err) {
                        return res.status(500).json({ message: 'Database error' });
                    }
                    
                    const userId = result.insertId;
                    
                    // Generate JWT token
                    const token = jwt.sign({ id: userId, email }, JWT_SECRET, { expiresIn: '7d' });
                    
                    res.status(201).json({
                        message: 'User created successfully',
                        token,
                        user: { id: userId, name, email }
                    });
                });
        });
    } catch (error) {
        console.error('Registration error:', error);
        res.status(500).json({ message: 'Server error' });
    }
});

// Login user
app.post('/api/auth/login', [
    body('email').isEmail().withMessage('Valid email is required'),
    body('password').notEmpty().withMessage('Password is required')
], (req, res) => {
    try {
        // Check for validation errors
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ 
                message: 'Validation failed', 
                errors: errors.array().map(error => ({
                    field: error.param,
                    msg: error.msg
                }))
            });
        }
        
        const { email, password } = req.body;
        
        // Find user by email
        db.query('SELECT * FROM users WHERE email = ?', [email], async (err, results) => {
            if (err) {
                return res.status(500).json({ message: 'Database error' });
            }
            
            if (results.length === 0) {
                return res.status(400).json({ 
                    message: 'Invalid credentials',
                    errors: [{ field: 'email', msg: 'Email not found' }]
                });
            }
            
            const user = results[0];
            
            // Check password
            const validPassword = await bcrypt.compare(password, user.password);
            if (!validPassword) {
                return res.status(400).json({ 
                    message: 'Invalid credentials',
                    errors: [{ field: 'password', msg: 'Incorrect password' }]
                });
            }
            
            // Generate JWT token
            const token = jwt.sign({ id: user.id, email }, JWT_SECRET, { expiresIn: '7d' });
            
            res.json({
                message: 'Login successful',
                token,
                user: { id: user.id, name: user.name, email: user.email }
            });
        });
    } catch (error) {
        console.error('Login error:', error);
        res.status(500).json({ message: 'Server error' });
    }
});

// Start free trial
app.post('/api/trials/start', authenticateToken, [
    body('plan').isIn(['basic', 'professional', 'enterprise']).withMessage('Valid plan is required')
], (req, res) => {
    try {
        // Check for validation errors
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ 
                message: 'Validation failed', 
                errors: errors.array()
            });
        }
        
        const userId = req.user.id;
        const { plan } = req.body;
        
        // Check if user already has an active trial
        db.query('SELECT * FROM trials WHERE user_id = ? AND status = "active"', [userId], (err, results) => {
            if (err) {
                return res.status(500).json({ message: 'Database error' });
            }
            
            if (results.length > 0) {
                return res.status(400).json({ message: 'You already have an active trial' });
            }
            
            // Calculate trial end date (14 days from now)
            const startDate = new Date();
            const endDate = new Date();
            endDate.setDate(endDate.getDate() + 14);
            
            // Create new trial
            db.query('INSERT INTO trials (user_id, plan, start_date, end_date) VALUES (?, ?, ?, ?)', 
                [userId, plan, startDate, endDate], (err, result) => {
                    if (err) {
                        return res.status(500).json({ message: 'Database error' });
                    }
                    
                    res.status(201).json({
                        message: 'Trial started successfully',
                        id: result.insertId,
                        user_id: userId,
                        plan,
                        start_date: startDate,
                        end_date: endDate,
                        status: 'active'
                    });
                });
        });
    } catch (error) {
        console.error('Trial start error:', error);
        res.status(500).json({ message: 'Server error' });
    }
});

// Get trial status
app.get('/api/trials/status', authenticateToken, (req, res) => {
    try {
        const userId = req.user.id;
        
        // Get active trial for user
        db.query('SELECT * FROM trials WHERE user_id = ? AND status = "active"', [userId], (err, results) => {
            if (err) {
                return res.status(500).json({ message: 'Database error' });
            }
            
            if (results.length === 0) {
                return res.status(404).json({ message: 'No active trial found' });
            }
            
            const trial = results[0];
            
            // Check if trial has expired
            const now = new Date();
            const endDate = new Date(trial.end_date);
            
            if (now > endDate) {
                // Update trial status to expired
                db.query('UPDATE trials SET status = "expired" WHERE id = ?', [trial.id], (err) => {
                    if (err) {
                        console.error('Error updating trial status:', err);
                    }
                });
                
                return res.status(404).json({ message: 'Trial has expired' });
            }
            
            res.json({
                active: true,
                id: trial.id,
                plan: trial.plan,
                start_date: trial.start_date,
                end_date: trial.end_date
            });
        });
    } catch (error) {
        console.error('Trial status error:', error);
        res.status(500).json({ message: 'Server error' });
    }
});

// Start server
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});
```

## Package.json

Create a `package.json` file:

```json
{
  "name": "naija-soft-backend",
  "version": "1.0.0",
  "description": "Backend for Nigerian Software Solutions",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "mysql2": "^3.6.0",
    "bcryptjs": "^2.4.3",
    "jsonwebtoken": "^9.0.1",
    "cors": "^2.8.5",
    "express-validator": "^7.0.1"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  }
}
```

## Setup Instructions

1. **Install Node.js and MySQL** on your server

2. **Create a MySQL database** named `naija_soft`

3. **Install dependencies**:
   ```
   npm install
   ```

4. **Configure environment variables** (optional):
   - DB_HOST: MySQL host (default: localhost)
   - DB_USER: MySQL username (default: root)
   - DB_PASSWORD: MySQL password (default: empty)
   - DB_NAME: MySQL database name (default: naija_soft)
   - JWT_SECRET: Secret key for JWT tokens

5. **Start the server**:
   ```
   npm start
   ```

6. **Update the API_BASE_URL** in the frontend code to match your server URL

This implementation provides a complete solution with:
- User registration and login with validation
- JWT-based authentication
- Free trial management with MySQL storage
- Proper error handling and validation
- Nigerian-themed design

The system ensures that users must be authenticated before starting a free trial, and all trial data is securely stored in the database.





